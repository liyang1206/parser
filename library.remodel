UseCaseModel LibraryManagementSystem {

	UC::searchBook()
	UC::listBookHistory()
	UC::makeReservation()
	UC::recommendBook()
	UC::cancelReservation()

	UC::listRecommendBook()
		
	UC::borrowBook()
	UC::renewBook()
	UC::payOverDueFee()
	UC::returnBook()
		
	UC::checkOverDueandComputeOverDueFee()
	UC::dueSoonNotification()
	UC::countDownSuspensionDay()
		
	UC::sendNotificationEmail()
				

	Actor User {

		searchBook
		listBookHistory
		makeReservation
		recommendBook
		cancelReservation

	}

	Actor Faculty extends User {

	}

	Actor Student extends User {

	}



	Actor Administrator {

		listRecommendBook

	}

	Actor Librarian {

		borrowBook
		renewBook
		payOverDueFee
		returnBook

	}

	Actor Scheduler {

		checkOverDueandComputeOverDueFee
		dueSoonNotification
		countDownSuspensionDay

	}

	Actor ThirdPartSystem {

		sendNotificationEmail

	}

}

DomainModel LibraryManagementSystem {

	/* Domain Model */
	@AutoCRUD
	Entity User {
	
		/* Basic information */
		UserID : String
		Name : String
		Sex : Sex[M|F]
		Password : String
		Email : String
		Faculty : String
		/* Library related information */
		LoanedNumber : Integer
		BorrowStatus : BorrowStatus[NORMAL|SUSPEND]
		SuspensionDays : Integer
		OverDueFee : Real
	
		[Refer]
		LoanedBook : Loan* (Association)
		ReservedBook : Reserve* (Association)
		RecommendedBook : RecommendBook* (Association)
	
		[INV]
		inv UniqueUserID : User.allInstance()->isUnique(u:User | u.UserID)
		inv OverDueFeeGreatThanEqualZero : OverDueFee >= 0
		inv LoanedNumberGreatThanEqualZero : LoanedNumber >= 0
		inv SuspensionDaysGreatThanEqualZero : SuspensionDays >= 0
	
	}
	
	Entity Student extends User {
	
		Major : String
		Programme : Programme[BACHELOR|MASTER|PHD]
		RegistrationStatus : StudentStatus[GRADUATED|PROGRAMMING]
	
		[INV]
		inv StudentLoanLessThanEqualTwelve: Student.allInstance()->forAll(stu : Student | stu.LoanedNumber <= 12)
		inv StudentLoanedBookAssociationInvariants : super.LoanedBook.size() <= 12 ASSOCINV
	
	}
	
	Entity Faculty extends User {
	
		Position : FacultyPosition[ASSISTANTPROFESSORS|ASSOCIATEPROFESSOR|PROFESSOR|CHAIRPROFESSOR]
		Status : FacultyStatus[HASRETIRED|INPOSITION]
	
		[INV]
		inv FacultyLoanLessthanEqualTwentyFour: Student.allInstance()->forAll(stu : Student | stu.LoanedNumber <= 24)
		inv FacultyLoanedBookAssociationInvariants : super.LoanedBook.size() <= 24 ASSOCINV
	
	}
	
	@AutoCRUD
	Entity Book {
	
		CallNo : String
		Title : String
		Edition : String
		Author : String
		Publisher : String
		Description : String
		ISBn : String
		CopyNum: Integer
	
		[Refer] 
		Copys : BookCopy* ! ( Association)
		Subject : Subject* (Association)
	
		[INV]
		inv BookCallNoUnique : Book.allInstance()->isUnique(b:Book | b.CallNo)
		inv BookISBNUnique : Book.allInstance()->isUnique(b:Book | b.ISBn)
		inv BookCopyNumGreatThanEqualZero : CopyNum >= 0
	
	}
	
	@AutoCRUD
	Entity Subject {
	
		Name : String
	
		[Refer]
		SuperSubject : Subject ! ( Association)
		SubSubject : Subject* (Association)
	
	}
	
	@AutoCRUD
	Entity BookCopy {
	
		Barcode : String
		Status : CopyStatus[AVAILABLE|INPROCESSING|LIBUSEONLY|ONHOLDSHELF|LOANED]
		Location : String
		IsReserved : Boolean
	
		[Refer]
		BookBelongs : Book (Association)
		LoanedRecord : Loan* (Association)
		ReservationRecord : Reserve* (Association)
	
		[INV]
		inv BarCodeUnique : BookCopy.allInstance()->isUnique(bc:BookCopy | bc.Barcode)
	
	}
	
	Entity Loan {
	
		LoanDate : Date
		RenewDate : Date
		DueDate : Date
		ReturnDate : Date
		RenewedTimes : Integer
		IsReturned : Boolean // for list loaning book and loaned book
		OverDueFee : Real
		OverDue3Days : Boolean
		OverDue10Days : Boolean
		OverDue17Days : Boolean
		OverDue31Days : Boolean
	
		[Refer]
		LoanedUser : User ! ( Association)
		LoanedCopy : BookCopy ! ( Association)
		LoanLibrarian : Librarian (Association)
		ReturnLibrarian : Librarian (Association)
	
		[INV]
		inv OverDueFeeGreatThanEqualZero : OverDueFee >= 0
		inv RenewedTimesLessThanEqualSix :  RenewedTimes >=0 and RenewedTimes <= 6
		inv LoanOverDueFeeGreatThanEqualZero : OverDueFee >= 0
		inv RenewDataAfterLoanDate : if (RenewDate.oclIsUndefined() = false) then RenewDate.isAfter(LoanDate) endif
		inv DueDateAfterLoanDate : DueDate.isAfter(LoanDate)
		inv ReturnDateAfterORSameLoanDate : if (ReturnDate.oclIsUndefined() = false) then ReturnDate.isAfter(LoanDate) or ReturnDate.isEqual(LoanDate) endif
		inv DueDateAfterORSameRenewDate : if (RenewDate.oclIsUndefined() = false) then DueDate.isAfter(RenewDate) or DueDate.isEqual(RenewDate) endif
		inv ReturnDateSameORAfterRenewDate : if (RenewDate.oclIsUndefined() = false and ReturnDate.oclIsUndefined() = false) then ReturnDate.isAfter(RenewDate) or ReturnDate.isEqual(RenewDate) endif
	
	}
	
	Entity Reserve {
	
		ReserveDate : Date
		IsReserveClosed : Boolean // for list all reserving book and reserved book 
	
		[Refer]
		ReservedCopy : BookCopy ! ( Association)
		ReservedUser : User ! ( Association)
	
	}
	
	Entity RecommendBook extends Book {
	
		RecommendDate : Date
	
		[Refer]
		RecommendUser : User ! ( Association)
	
		[INV]
		inv BookCallNoUnique : Book.allInstance()->isUnique(b:Book | b.CallNo)
		inv BookISBNUnique : Book.allInstance()->isUnique(b:Book | b.ISBn)
		inv BookCopyNumGreatThanEqualZero : super.CopyNum >= 0
	
	}
	
	Entity Administrator {
	
		AdminID : String
		UserName : String
		Password : String
	
		[INV]
		inv AdministratorIDUnique : Administrator.allInstance()->isUnique(a : Administrator | a.AdminID)
	
	}
	
	@AutoCRUD
	Entity Librarian {
	
		LibrarianID : String
		Name : String
		Password : String
	
		[INV] 
		inv LibrarianIDUnique : Librarian.allInstance()->isUnique(l:Librarian | l.LibrarianID)
	
	}


	
}

/* System Controller */
Service LibraryManagementSystem {

	[Operation]

	recommendBook(userid, book)
	queryBookCopy(barcode)
	addBookCopy(callNo, copy)
	deleteBookCopy(barcode)
	makeReservation(uid, barcode)
	cannelReservation(uid, barcode)
	borrowBook(uid, barcode)
	renewBook(uid, barcode)
	returnBook(barcode)
	payOverDueFee(uid, fee, change)
	
	// regular checking
	checkOverDueandComputeOverDueFee()
	dueSoonNotification()
	countDownSuspensionDay()
	

	[TempProperty]
}

Service ThirdPartServices {

	[Operation]
	sendNotificationEmail(user)

}

// list book
Service ListBookHistory {

	[Operation]
	listBorrowHistory(userid)
	listHodingBook(userid)
	listOverDueBook(userid)
	listReservationBook(userid)
	listRecommendBook(userid)

}

// for book
Service SearchBook {

	[Operation]
	searchBookByBarCode(barcode)
	searchBookByTitle(title)
	searchBookByAuthor(authorname)
	searchBookByISBN(ISBNnumber)
	searchBookBySubject(subject)

}

Service ManageUserCRUDService {

	[Operation]
	createUser(userid, name, sex, password, email, faculty, loanednumber, borrowstatus, suspensiondays, overduefee)
	queryUser(UserID)
	modifyUser(userid, name, sex, password, email, faculty, loanednumber, borrowstatus, suspensiondays, overduefee)
	deleteUser(UserID)
	createStudent(userID : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, major : String, programme : Programme[BACHELOR|MASTER|PHD], registrationStatus : StudentStatus[GRADUATED|PROGRAMMING])
	createFaculty(userID : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, position : FacultyPosition[ASSISTANTPROFESSORS|ASSOCIATEPROFESSOR|PROFESSOR|CHAIRPROFESSOR], status : FacultyStatus[HASRETIRED|INPOSITION]) 
	modifyStudent(userID : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, major : String, programme : Programme[BACHELOR|MASTER|PHD], registrationStatus : StudentStatus[GRADUATED|PROGRAMMING])
	modifyFaculty(userID : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, major : String, position : FacultyPosition[ASSISTANTPROFESSORS|ASSOCIATEPROFESSOR|PROFESSOR|CHAIRPROFESSOR], status : FacultyStatus[HASRETIRED|INPOSITION])

}
Service ManageBookCRUDService {

	[Operation]
	createBook(callno, title, edition, author, publisher, description, isbn, copynum)
	queryBook(CallNo)
	modifyBook(callno, title, edition, author, publisher, description, isbn, copynum)
	deleteBook(CallNo)
	
}
Service ManageSubjectCRUDService {

	[Operation]
	createSubject(name)
	querySubject(Name)
	modifySubject(name)
	deleteSubject(Name)
	
}
Service ManageBookCopyCRUDService {

	[Operation]
	addBookCopy(callNo:String, barcode : String, location : String)
	queryBookCopy(Barcode)
	modifyBookCopy(barcode, status, location, isreserved)
	deleteBookCopy(barcode:String)
	
}
Service ManageLibrarianCRUDService {

	[Operation]
	createLibrarian(librarianid, name, password)
	queryLibrarian(LibrarianID)
	modifyLibrarian(librarianid, name, password)
	deleteLibrarian(LibrarianID)
	
}





/* -------------------- Contracts ----------------------*/
/* Search book */
Contract SearchBook::searchBookByBarCode(barcode:String): Set(Book) {

	precondition:
		barcode.oclIsTypeOf(String)

	postcondition:
		result = Book.allInstance()->select(book:Book | book.Copys->exists(c:BookCopy | c.Barcode = barcode))
}

Contract SearchBook::searchBookByTitle(title:String): Set(Book) {

	precondition:
		title <> ""

	postcondition:
		result = Book.allInstance()->select(book:Book | book.Title = title)         
}

Contract SearchBook::searchBookByAuthor(authorname:String) : Set(Book) {

	precondition:
		authorname <> ""

	postcondition:
		result = Book.allInstance()->select(book:Book | book.Author = authorname)
}

Contract SearchBook::searchBookByISBN(ISBNnumber:String): Set(Book) {

	precondition:
		ISBNnumber.oclIsTypeOf(String)

	postcondition:
		result = Book.allInstance()->select(book:Book | book.ISBn = ISBNnumber)
}

Contract SearchBook::searchBookBySubject(subject:String): Set(Book) {

	precondition:
		subject.oclIsTypeOf(String)

	postcondition:
		result = Book.allInstance()->select(book:Book | book.Subject->exists(s:Subject | s.Name = subject))
}

/* Main functions */
Contract LibraryManagementSystem::makeReservation(uid:String, barcode:String) : Boolean {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		copy:BookCopy = BookCopy.allInstance()->any(bc:BookCopy | bc.Barcode = barcode)

	precondition:
		user.oclIsUndefined() = false and
		copy.oclIsUndefined() = false and
		copy.Status = CopyStatus::LOANED and
		copy.IsReserved = false

	postcondition:
		let res:Reserve in
		res.oclIsNew() and
		copy.IsReserved = true and
		res.IsReserveClosed = false and
		res.ReserveDate.isEqual(Today) and
		res.ReservedUser = user and
		res.ReservedCopy = copy and
		user.ReservedBook->includes(res) and
		copy.ReservationRecord->includes(res) and
		Reserve.allInstance()->includes(res) and
		result = true

}

Contract LibraryManagementSystem::cannelReservation(uid:String, barcode:String) : Boolean {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		copy:BookCopy = BookCopy.allInstance()->any(bc:BookCopy | bc.Barcode = barcode),
		res:Reserve = Reserve.allInstance()->any(r:Reserve | r.ReservedCopy = copy and r.ReservedUser = user)

	precondition:
		user.oclIsUndefined() = false and
		copy.oclIsUndefined() = false and
		copy.Status = CopyStatus::LOANED and
		copy.IsReserved = true and
		res.oclIsUndefined() = false and
		res.IsReserveClosed = false

	postcondition:
		copy.IsReserved = false and
		res.IsReserveClosed = true and
		result = true

}

Contract LibraryManagementSystem::borrowBook(uid:String, barcode:String) : Boolean {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		stu:Student = Student.allInstance()->any(s:Student | s.UserID = uid),
		fac:Faculty = Faculty.allInstance()->any(f:Faculty | f.UserID = uid),
		copy:BookCopy = BookCopy.allInstance()->any(bc:BookCopy | bc.Barcode = barcode),
		res:Reserve = Reserve.allInstance()->any(r:Reserve | r.ReservedCopy = copy and r.ReservedUser = user and r.IsReserveClosed = false)

	precondition:
		user.oclIsUndefined() = false and
		copy.oclIsUndefined() = false and
		user.BorrowStatus = BorrowStatus::NORMAL and
		user.SuspensionDays = 0 and
		if
			user.oclIsTypeOf(Student)
		then
			if
				stu.Programme = Programme::BACHELOR
			then
				stu.LoanedNumber < 20
			else
				if
					stu.Programme = Programme::MASTER
				then
					stu.LoanedNumber < 40
				else
					stu.LoanedNumber < 60
				endif
			endif
		else
			fac.LoanedNumber < 60
		endif and
		(copy.Status = CopyStatus::AVAILABLE or
			(copy.Status = CopyStatus::ONHOLDSHELF and
				copy.IsReserved = true and
				res.oclIsUndefined() = false and
				res.IsReserveClosed = false
			)
		)

	postcondition:
		let loan:Loan in
		loan.oclIsNew() and
		loan.LoanedUser = user and
		loan.LoanedCopy = copy and
		loan.IsReturned = false and
		loan.LoanDate = Today and
		user.LoanedNumber = user.LoanedNumber@pre + 1 and
		user.LoanedBook->includes(loan) and
		copy.LoanedRecord->includes(loan) and
		if
			user.oclIsTypeOf(Student)
		then
			loan.DueDate = Today.After(30)
		else
			loan.DueDate = Today.After(60)
		endif and
		if
			copy.Status@pre = CopyStatus::ONHOLDSHELF
		then
			copy.IsReserved = false and
			res.IsReserveClosed = true
		endif and
		copy.Status = CopyStatus::LOANED and
		loan.OverDue3Days = false and
		loan.OverDue10Days = false and
		loan.OverDue17Days = false and
		loan.OverDue31Days = false and
		Loan.allInstance()->includes(loan) and
		result = true

}

Contract LibraryManagementSystem::returnBook(barcode:String) : Boolean {

	definition:
		copy:BookCopy = BookCopy.allInstance()->any(bc:BookCopy | bc.Barcode = barcode and bc.Status = CopyStatus::LOANED),
		loan:Loan = Loan.allInstance()->any(l:Loan | l.LoanedCopy = copy and l.IsReturned = false),
		loans:Set(Loan) = Loan.allInstance()->select(l:Loan | l.LoanedUser = loan.LoanedUser and l.IsReturned = false and l.DueDate.isAfter(Today)),
		res:Reserve = copy.ReservationRecord->any(r:Reserve | r.ReservedCopy = copy)

	precondition:
		copy.oclIsUndefined() = false and
		loan.oclIsUndefined() = false

	postcondition:
		loan.LoanedUser.LoanedNumber = loan.LoanedUser.LoanedNumber@pre - 1 and
		loan.IsReturned = true and
		loan.ReturnDate = Today and
		if
			copy.IsReserved = true
		then
			copy.Status = CopyStatus::ONHOLDSHELF and
			sendNotificationEmail(res.ReservedUser.Email)
		else
			copy.Status = CopyStatus::AVAILABLE
		endif and
		result = true
}

Contract LibraryManagementSystem::renewBook(uid:String, barcode:String) : Boolean {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		stu:Student = Student.allInstance()->any(s:Student | s.UserID = uid),
		fac:Faculty = Faculty.allInstance()->any(f:Faculty | f.UserID = uid),
		copy:BookCopy = BookCopy.allInstance()->any(bc:BookCopy | bc.Barcode = barcode and bc.Status = CopyStatus::LOANED),
		loan:Loan = Loan.allInstance()->any(l:Loan | l.LoanedUser = user and l.LoanedCopy = copy)

	precondition:
		user.BorrowStatus = BorrowStatus::NORMAL and
		user.oclIsUndefined() = false and
		copy.oclIsUndefined() = false and
		loan.oclIsUndefined() = false and
		copy.IsReserved = false and
		loan.DueDate.isAfter(Today) and
		if
			user.oclIsTypeOf(Student)
		then
			loan.RenewedTimes < 3
		else
			loan.RenewedTimes < 6
		endif and
		loan.OverDueFee = 0

	postcondition:
		loan.RenewedTimes = loan.RenewedTimes@pre + 1 and
		loan.RenewDate = Today and
		if
			user.oclIsTypeOf(Student)
		then
			if
				stu.Programme = Programme::BACHELOR
			then
				loan.DueDate = loan.DueDate@pre.After(20)
			else
				if
					stu.Programme = Programme::MASTER
				then
					loan.DueDate = loan.DueDate@pre.After(40)
				else
					loan.DueDate = loan.DueDate@pre.After(60)
				endif
			endif
		else
			loan.DueDate = loan.DueDate@pre.After(60)
		endif and
		result = true
}

Contract LibraryManagementSystem::payOverDueFee(uid:String, fee:Real) : Boolean {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		loans:Set(Loan) = Loan.allInstance()->select(l:Loan | l.LoanedUser = user and l.DueDate.isBefore(Today)and l.IsReturned = true and l.OverDueFee > 0)

	precondition:
		user.oclIsUndefined() = false and
		loans.notEmpty() and
		fee >= user.OverDueFee

	postcondition:
		user.OverDueFee = 0 and
		loans->forAll(l:Loan |
			l.OverDueFee = 0)
		and
		result = true
}

Contract LibraryManagementSystem::dueSoonNotification()  {

	definition:
		users:Set(User) = User.allInstance()->select(user:User | user.LoanedBook->exists(loan:Loan | loan.IsReturned = false and Today.After(3).isAfter(loan.DueDate))) 

	precondition:
		true

	postcondition:
		users->forAll(u:User |
			sendNotificationEmail(u.Email))
}

//Contract dueSoonNotification()  { 
//	precondition: true   
//	postcondition: let users:Set(User) = User.allInstance()->select(user:User | user.LoanedBook->exists(loan:Loan | loan.isReturned = false and Today.After(3) = loan.DueDate)) in 
//					users->forAll(u:User | sendNotificationEmail(u))
//}  
Contract LibraryManagementSystem::checkOverDueandComputeOverDueFee() {

	definition:
		loans:Set(Loan) = Loan.allInstance()->select(loan:Loan | loan.IsReturned = false and loan.DueDate.isBefore(Today))

	precondition:
		true

	postcondition:
		loans->forAll(loan:Loan |
			loan.IsReturned = false and
			if
				Today.Before(3).isAfter(loan.DueDate) and
				loan.OverDue3Days = false
			then
				loan.LoanedUser.BorrowStatus = BorrowStatus::SUSPEND and
				sendNotificationEmail(loan.LoanedUser.Email) and
				loan.OverDue3Days = true
			endif and
			if
				Today.Before(10).isAfter(loan.DueDate) and
				loan.OverDue10Days = false
			then
				loan.LoanedUser.SuspensionDays = loan.LoanedUser.SuspensionDays@pre + 14 and
				sendNotificationEmail(loan.LoanedUser.Email) and
				loan.OverDue10Days = true
			endif and
			if
				Today.Before(17).isAfter(loan.DueDate) and
				loan.OverDue17Days = false
			then
				loan.LoanedUser.SuspensionDays = loan.LoanedUser.SuspensionDays@pre + 30 and
				sendNotificationEmail(loan.LoanedUser.Email) and
				loan.OverDue17Days = true
			endif and
			if
				Today.Before(31).isAfter(loan.DueDate) and
				loan.OverDue31Days = false
			then
				loan.OverDueFee = 60 and
				sendNotificationEmail(loan.LoanedUser.Email) and
				loan.OverDue31Days = true and
				loan.LoanedUser.OverDueFee = loan.LoanedUser.OverDueFee@pre + loan.OverDueFee
			endif
		)
}

Contract LibraryManagementSystem::countDownSuspensionDay() {

	definition:
	
		users:Set(User) = User.allInstance()->select(u:User | u.SuspensionDays > 0)

	precondition:
		true

	postcondition:

		users->forAll(u:User |
			u.SuspensionDays = u.SuspensionDays@pre - 1 and
			if
				u.BorrowStatus = BorrowStatus::SUSPEND and
				u.OverDueFee = 0 and
				u.SuspensionDays = 0
			then
				u.BorrowStatus = BorrowStatus::NORMAL
			endif
		)
}

/* List records */
Contract ListBookHistory::listBorrowHistory(uid:String): Set(Loan) {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid)

	precondition:
		user.oclIsUndefined() = false /*postcondition: result = user.LoanedBook->collect(l:Loan| l.LoanedCopy)*/

	postcondition:
		result = user.LoanedBook

}


Contract ListBookHistory::listHodingBook(uid:String): Set(Loan) {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid)

	precondition:
		user.oclIsUndefined() = false

	postcondition:
		result = user.LoanedBook->select(l:Loan | l.IsReturned = false)
}

Contract ListBookHistory::listOverDueBook(uid:String): Set(BookCopy) {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		loans:Set(Loan) = user.LoanedBook->select(l:Loan | l.IsReturned = false and l.OverDueFee > 0)

	precondition:
		user.oclIsUndefined() = false and
		loans.oclIsUndefined() = false

	postcondition:
		result = loans->collect(l:Loan | l.LoanedCopy)
}

Contract ListBookHistory::listReservationBook(uid:String): Set(BookCopy) {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		res:Set(Reserve) = user.ReservedBook

	precondition:
		user.oclIsUndefined() = false and
		res.oclIsUndefined() = false

	postcondition:
		result = res->collect(r:Reserve | r.ReservedCopy)
}

Contract ListBookHistory::listRecommendBook(uid:String): Set(RecommendBook) {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		rBooks:Set(RecommendBook) = user.RecommendedBook

	precondition:
		user.oclIsUndefined() = false and
		rBooks.oclIsUndefined() = false

	postcondition:
		result = rBooks

}

/* For Book and Book Copy*/
Contract LibraryManagementSystem::recommendBook(uid:String, callNo : String, title : String, edition : String, author : String, publisher : String, description : String, isbn : String) : Boolean {

	definition:
		user:User = User.allInstance()->any(u:User | u.UserID = uid),
		rb:RecommendBook = RecommendBook.allInstance()->any(r:RecommendBook | r.CallNo = callNo)

	precondition:
		user.oclIsUndefined() = false and
		rb.oclIsUndefined() = true

	postcondition:
		let r:RecommendBook in
		r.oclIsNew() and
		r.CallNo = callNo and
		r.Title = title and
		r.Edition = edition and
		r.Author = author and
		r.Publisher = publisher and
		r.Description = description and
		r.ISBn = isbn and
		r.RecommendDate = Today and
		r.RecommendUser = user and
		user.RecommendedBook->includes(r) and
		RecommendBook.allInstance()->includes(r) and
		result = true
}







/* For student account*/
Contract ManageUserCRUDService::createStudent(userID : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, major : String, programme : Programme[BACHELOR|MASTER|PHD], registrationStatus : StudentStatus[GRADUATED|PROGRAMMING]) : Boolean {

	definition:
		user:Student = Student.allInstance()->any(u:Student | u.UserID = userID)

	precondition:
		user.oclIsUndefined() = true

	postcondition:
		let u:Student in
		u.oclIsNew() and
		u.UserID = userID and
		u.Name = name and
		u.Email = email and
		u.Password = password and
		u.Sex = sex and
		u.Faculty = faculty and
		u.LoanedNumber = 0 and
		u.BorrowStatus = BorrowStatus::NORMAL and
		u.SuspensionDays = 0 and
		u.OverDueFee = 0 and
		u.Major = major and
		u.Programme = programme and
		u.RegistrationStatus = registrationStatus and
		User.allInstance()->includes(u) and
		Student.allInstance()->includes(u) and
		result = true
}

Contract ManageUserCRUDService::modifyStudent(userID : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, major : String, programme : Programme[BACHELOR|MASTER|PHD], registrationStatus : StudentStatus[GRADUATED|PROGRAMMING]) : Boolean {

	definition:
		user:Student = Student.allInstance()->any(u:Student | u.UserID = userID)

	precondition:
		user.oclIsUndefined() = false

	postcondition:
		user.UserID = userID and
		user.Name = name and
		user.Email = email and
		user.Password = password and
		user.Sex = sex and
		user.Faculty = faculty and
		user.LoanedNumber = 0 and
		user.BorrowStatus = BorrowStatus::NORMAL and
		user.SuspensionDays = 0 and
		user.OverDueFee = 0 and
		user.Major = major and
		user.Programme = programme and
		user.RegistrationStatus = registrationStatus and
		result = true
}

/* For faculty account*/
Contract ManageUserCRUDService::createFaculty(userID : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, position : FacultyPosition[ASSISTANTPROFESSORS|ASSOCIATEPROFESSOR|PROFESSOR|CHAIRPROFESSOR], status : FacultyStatus[HASRETIRED|INPOSITION]) : Boolean {

	definition:
		user:Faculty = Faculty.allInstance()->any(u:Faculty | u.UserID = userID)

	precondition:
		user.oclIsUndefined() = true

	postcondition:
		let u:Faculty in
		u.oclIsNew() and
		u.UserID = userID and
		u.Name = name and
		u.Email = email and
		u.Password = password and
		u.Sex = sex and
		u.Faculty = faculty and
		u.LoanedNumber = 0 and
		u.BorrowStatus = BorrowStatus::NORMAL and
		u.SuspensionDays = 0 and
		u.OverDueFee = 0 and
		u.Position = position and
		u.Status = status and
		User.allInstance()->includes(u) and
		Faculty.allInstance()->includes(u) and
		result = true
}

/* For faculty account*/
Contract ManageUserCRUDService::modifyFaculty(userID : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, major : String, position : FacultyPosition[ASSISTANTPROFESSORS|ASSOCIATEPROFESSOR|PROFESSOR|CHAIRPROFESSOR], status : FacultyStatus[HASRETIRED|INPOSITION]) : Boolean {

	definition:
		user:Faculty = Faculty.allInstance()->any(u:Faculty | u.UserID = userID)

	precondition:
		user.oclIsUndefined() = false

	postcondition:
		user.UserID = userID and
		user.Name = name and
		user.Email = email and
		user.Password = password and
		user.Sex = sex and
		user.Faculty = faculty and
		user.LoanedNumber = 0 and
		user.BorrowStatus = BorrowStatus::NORMAL and
		user.SuspensionDays = 0 and
		user.OverDueFee = 0 and
		user.Position = position and
		user.Status = status and
		result = true
}



Contract ThirdPartServices::sendNotificationEmail(email: String) : Boolean {

	precondition:
		email <> ""

	postcondition:
		result = true

}

//entity create operation 
Contract  ManageUserCRUDService::createUser(userid : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, loanednumber : Integer, borrowstatus : BorrowStatus[NORMAL|SUSPEND], suspensiondays : Integer, overduefee : Real) : Boolean {
	
	/* definition: find specific User instance by userid */
	definition:
		user:User = User.allInstance()->any(use:User | use.UserID = userid)
	
	/* precondition: the instance user was not found in the system */
	precondition:
		user.oclIsUndefined() = true
	
	/* postcondition: 
	 * A User instance use was created.
	 * all properties of use became the same values as inputs.
	 */
	postcondition:
		let use:User in
		use.oclIsNew() and
		use.UserID = userid and
		use.Name = name and
		use.Sex = sex and
		use.Password = password and
		use.Email = email and
		use.Faculty = faculty and
		use.LoanedNumber = loanednumber and
		use.BorrowStatus = borrowstatus and
		use.SuspensionDays = suspensiondays and
		use.OverDueFee = overduefee and
		User.allInstance()->includes(use) and
		result = true
}

//entity query operation 
Contract  ManageUserCRUDService::queryUser(userid : String) : User {
	
	/* definition: find specific User instance by userid */
	definition:
		user:User = User.allInstance()->any(use:User | use.UserID = userid)
	
	/* precondition: the instance user was found in the system */	
	precondition:
		user.oclIsUndefined() = false
		
	/* postcondition: return found the instance user */
	postcondition:
		result = user
}
						

//entity modify operation 
Contract  ManageUserCRUDService::modifyUser(userid : String, name : String, sex : Sex[M|F], password : String, email : String, faculty : String, loanednumber : Integer, borrowstatus : BorrowStatus[NORMAL|SUSPEND], suspensiondays : Integer, overduefee : Real) : Boolean {
	
	/* definition: find specific User instance by userid */
	definition:
		user:User = User.allInstance()->any(use:User | use.UserID = userid)
	
	/* precondition: the instance user was found in the system */
	precondition:
		user.oclIsUndefined() = false
	
	/* postcondition: all properties of use became the same values as inputs. */							
	postcondition:
		user.UserID = userid and
		user.Name = name and
		user.Sex = sex and
		user.Password = password and
		user.Email = email and
		user.Faculty = faculty and
		user.LoanedNumber = loanednumber and
		user.BorrowStatus = borrowstatus and
		user.SuspensionDays = suspensiondays and
		user.OverDueFee = overduefee and
		result = true
}

//entity delete operation 
Contract  ManageUserCRUDService::deleteUser(userid : String) : Boolean {
	
	/* definition: find specific User instance by userid */
	definition:
		user:User = User.allInstance()->any(use:User | use.UserID = userid)
	
	/* precondition: the instance user was found in the system */
	precondition:
		user.oclIsUndefined() = false and
		User.allInstance()->includes(user)
	
	/* postcondition: the instance user was deleted from the system */
	postcondition:
		User.allInstance()->excludes(user) and
		result = true
}
 
//entity create operation 
Contract  ManageBookCRUDService::createBook(callno : String, title : String, edition : String, author : String, publisher : String, description : String, isbn : String, copynum : Integer) : Boolean {
	
	/* definition: find specific Book instance by callno */
	definition:
		book:Book = Book.allInstance()->any(boo:Book | boo.CallNo = callno)
	
	/* precondition: the instance book was not found in the system */
	precondition:
		book.oclIsUndefined() = true
	
	/* postcondition: 
	 * A Book instance boo was created.
	 * all properties of boo became the same values as inputs.
	 */
	postcondition:
		let boo:Book in
		boo.oclIsNew() and
		boo.CallNo = callno and
		boo.Title = title and
		boo.Edition = edition and
		boo.Author = author and
		boo.Publisher = publisher and
		boo.Description = description and
		boo.ISBn = isbn and
		boo.CopyNum = copynum and
		Book.allInstance()->includes(boo) and
		result = true
}

//entity query operation 
Contract  ManageBookCRUDService::queryBook(callno : String) : Book {
	
	/* definition: find specific Book instance by callno */
	definition:
		book:Book = Book.allInstance()->any(boo:Book | boo.CallNo = callno)
	
	/* precondition: the instance book was found in the system */	
	precondition:
		book.oclIsUndefined() = false
		
	/* postcondition: return found the instance book */
	postcondition:
		result = book
}
						

//entity modify operation 
Contract  ManageBookCRUDService::modifyBook(callno : String, title : String, edition : String, author : String, publisher : String, description : String, isbn : String, copynum : Integer) : Boolean {
	
	/* definition: find specific Book instance by callno */
	definition:
		book:Book = Book.allInstance()->any(boo:Book | boo.CallNo = callno)
	
	/* precondition: the instance book was found in the system */
	precondition:
		book.oclIsUndefined() = false
	
	/* postcondition: all properties of boo became the same values as inputs. */							
	postcondition:
		book.CallNo = callno and
		book.Title = title and
		book.Edition = edition and
		book.Author = author and
		book.Publisher = publisher and
		book.Description = description and
		book.ISBn = isbn and
		book.CopyNum = copynum and
		result = true
}

//entity delete operation 
Contract  ManageBookCRUDService::deleteBook(callno : String) : Boolean {
	
	/* definition: find specific Book instance by callno */
	definition:
		book:Book = Book.allInstance()->any(boo:Book | boo.CallNo = callno)
	
	/* precondition: the instance book was found in the system */
	precondition:
		book.oclIsUndefined() = false and
		Book.allInstance()->includes(book)
	
	/* postcondition: the instance book was deleted from the system */
	postcondition:
		Book.allInstance()->excludes(book) and
		result = true
}
 
//entity create operation 
Contract  ManageSubjectCRUDService::createSubject(name : String) : Boolean {
	
	/* definition: find specific Subject instance by name */
	definition:
		subject:Subject = Subject.allInstance()->any(sub:Subject | sub.Name = name)
	
	/* precondition: the instance subject was not found in the system */
	precondition:
		subject.oclIsUndefined() = true
	
	/* postcondition: 
	 * A Subject instance sub was created.
	 * all properties of sub became the same values as inputs.
	 */
	postcondition:
		let sub:Subject in
		sub.oclIsNew() and
		sub.Name = name and
		Subject.allInstance()->includes(sub) and
		result = true
}

//entity query operation 
Contract  ManageSubjectCRUDService::querySubject(name : String) : Subject {
	
	/* definition: find specific Subject instance by name */
	definition:
		subject:Subject = Subject.allInstance()->any(sub:Subject | sub.Name = name)
	
	/* precondition: the instance subject was found in the system */	
	precondition:
		subject.oclIsUndefined() = false
		
	/* postcondition: return found the instance subject */
	postcondition:
		result = subject
}
						

//entity modify operation 
Contract  ManageSubjectCRUDService::modifySubject(name : String) : Boolean {
	
	/* definition: find specific Subject instance by name */
	definition:
		subject:Subject = Subject.allInstance()->any(sub:Subject | sub.Name = name)
	
	/* precondition: the instance subject was found in the system */
	precondition:
		subject.oclIsUndefined() = false
	
	/* postcondition: all properties of sub became the same values as inputs. */							
	postcondition:
		subject.Name = name and
		result = true
}

//entity delete operation 
Contract  ManageSubjectCRUDService::deleteSubject(name : String) : Boolean {
	
	/* definition: find specific Subject instance by name */
	definition:
		subject:Subject = Subject.allInstance()->any(sub:Subject | sub.Name = name)
	
	/* precondition: the instance subject was found in the system */
	precondition:
		subject.oclIsUndefined() = false and
		Subject.allInstance()->includes(subject)
	
	/* postcondition: the instance subject was deleted from the system */
	postcondition:
		Subject.allInstance()->excludes(subject) and
		result = true
}
 


Contract ManageBookCopyCRUDService::addBookCopy(callNo:String, barcode : String, location : String) : Boolean {

	definition:
		book:Book = Book.allInstance()->any(b:Book | b.CallNo = callNo),
		bc:BookCopy = book.Copys->any(c:BookCopy | c.Barcode = barcode)

	precondition:
		book.oclIsUndefined() = false and
		bc.oclIsUndefined() = true

	postcondition:
		let copy:BookCopy in
		copy.oclIsNew() and
		copy.Barcode = barcode and
		copy.Status = CopyStatus::AVAILABLE and
		copy.Location = location and
		copy.IsReserved = false and
		book.Copys->includes(copy) and
		copy.BookBelongs = book and
		book.CopyNum = book.CopyNum@pre + 1 and
		BookCopy.allInstance()->includes(copy) and
		result = true
}

//entity query operation 
Contract  ManageBookCopyCRUDService::queryBookCopy(barcode : String) : BookCopy {
	
	/* definition: find specific BookCopy instance by barcode */
	definition:
		bookcopy:BookCopy = BookCopy.allInstance()->any(boo:BookCopy | boo.Barcode = barcode)
	
	/* precondition: the instance bookcopy was found in the system */	
	precondition:
		bookcopy.oclIsUndefined() = false
		
	/* postcondition: return found the instance bookcopy */
	postcondition:
		result = bookcopy
}
						

//entity modify operation 
Contract  ManageBookCopyCRUDService::modifyBookCopy(barcode : String, status : CopyStatus[AVAILABLE|INPROCESSING|LIBUSEONLY|ONHOLDSHELF|LOANED], location : String, isreserved : Boolean) : Boolean {
	
	/* definition: find specific BookCopy instance by barcode */
	definition:
		bookcopy:BookCopy = BookCopy.allInstance()->any(boo:BookCopy | boo.Barcode = barcode)
	
	/* precondition: the instance bookcopy was found in the system */
	precondition:
		bookcopy.oclIsUndefined() = false
	
	/* postcondition: all properties of boo became the same values as inputs. */							
	postcondition:
		bookcopy.Barcode = barcode and
		bookcopy.Status = status and
		bookcopy.Location = location and
		bookcopy.IsReserved = isreserved and
		result = true
}

//entity delete operation 
Contract  ManageBookCopyCRUDService::deleteBookCopy(barcode : String) : Boolean {
	
	/* definition: find specific BookCopy instance by barcode */
	definition:
		bookcopy:BookCopy = BookCopy.allInstance()->any(boo:BookCopy | boo.Barcode = barcode)
	
	/* precondition: the instance bookcopy was found in the system */
	precondition:
		bookcopy.oclIsUndefined() = false and
		BookCopy.allInstance()->includes(bookcopy)
	
	/* postcondition: the instance bookcopy was deleted from the system */
	postcondition:
		BookCopy.allInstance()->excludes(bookcopy) and
		result = true
}
 
//entity create operation 
Contract  ManageLibrarianCRUDService::createLibrarian(librarianid : String, name : String, password : String) : Boolean {
	
	/* definition: find specific Librarian instance by librarianid */
	definition:
		librarian:Librarian = Librarian.allInstance()->any(lib:Librarian | lib.LibrarianID = librarianid)
	
	/* precondition: the instance librarian was not found in the system */
	precondition:
		librarian.oclIsUndefined() = true
	
	/* postcondition: 
	 * A Librarian instance lib was created.
	 * all properties of lib became the same values as inputs.
	 */
	postcondition:
		let lib:Librarian in
		lib.oclIsNew() and
		lib.LibrarianID = librarianid and
		lib.Name = name and
		lib.Password = password and
		Librarian.allInstance()->includes(lib) and
		result = true
}

//entity query operation 
Contract  ManageLibrarianCRUDService::queryLibrarian(librarianid : String) : Librarian {
	
	/* definition: find specific Librarian instance by librarianid */
	definition:
		librarian:Librarian = Librarian.allInstance()->any(lib:Librarian | lib.LibrarianID = librarianid)
	
	/* precondition: the instance librarian was found in the system */	
	precondition:
		librarian.oclIsUndefined() = false
		
	/* postcondition: return found the instance librarian */
	postcondition:
		result = librarian
}
						

//entity modify operation 
Contract  ManageLibrarianCRUDService::modifyLibrarian(librarianid : String, name : String, password : String) : Boolean {
	
	/* definition: find specific Librarian instance by librarianid */
	definition:
		librarian:Librarian = Librarian.allInstance()->any(lib:Librarian | lib.LibrarianID = librarianid)
	
	/* precondition: the instance librarian was found in the system */
	precondition:
		librarian.oclIsUndefined() = false
	
	/* postcondition: all properties of lib became the same values as inputs. */							
	postcondition:
		librarian.LibrarianID = librarianid and
		librarian.Name = name and
		librarian.Password = password and
		result = true
}

//entity delete operation 
Contract  ManageLibrarianCRUDService::deleteLibrarian(librarianid : String) : Boolean {
	
	/* definition: find specific Librarian instance by librarianid */
	definition:
		librarian:Librarian = Librarian.allInstance()->any(lib:Librarian | lib.LibrarianID = librarianid)
	
	/* precondition: the instance librarian was found in the system */
	precondition:
		librarian.oclIsUndefined() = false and
		Librarian.allInstance()->includes(librarian)
	
	/* postcondition: the instance librarian was deleted from the system */
	postcondition:
		Librarian.allInstance()->excludes(librarian) and
		result = true
}
 




